<!-- petualangan-dodo.html -->
<!doctype html>
<html lang="id">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Petualangan Dodo di Dunia Hewan — Game Edu PAUD</title>
<style>
  :root{
    --bg:#f6fbff; --card:#ffffff; --accent:#ffd166; --muted:#7a8b8f;
    --shadow: 0 8px 20px rgba(18,35,66,0.09);
  }
  html,body{height:100%;margin:0;font-family:Inter,ui-sans-serif,system-ui,Segoe UI,Roboto,"Helvetica Neue",Arial;}
  body{
    background: linear-gradient(180deg,#e6f2ff 0%, #f6fbff 60%);
    display:flex;align-items:center;justify-content:center;padding:20px;
  }

  .container{
    width:100%;max-width:980px;background:var(--card);border-radius:18px;box-shadow:var(--shadow);padding:18px;
  }

  header{display:flex;align-items:center;gap:12px;margin-bottom:12px}
  .logo{
    width:64px;height:64px;border-radius:14px;background:linear-gradient(135deg,#ffd166,#ff7b7b);display:flex;align-items:center;justify-content:center;font-weight:700;color:#fff;font-size:28px;
  }
  h1{margin:0;font-size:20px}
  p.lead{margin:0;color:var(--muted);font-size:13px}

  .stage{display:flex;gap:16px;align-items:flex-start}
  .left{flex:2;min-height:360px;padding:12px;background:linear-gradient(180deg,#fff,#fbfeff);border-radius:12px;border:1px solid rgba(10,20,40,0.03)}
  .right{flex:1;min-width:260px;padding:12px;background:linear-gradient(180deg,#fff,#fbfeff);border-radius:12px;border:1px solid rgba(10,20,40,0.03)}
  
  .status{display:flex;gap:12px;align-items:center;margin-bottom:10px}
  .badge{background:var(--accent);padding:8px 10px;border-radius:10px;font-weight:700;color:#2b2b2b;box-shadow:0 6px 14px rgba(255,125,125,0.12)}
  .score{margin-left:auto;font-weight:700}

  .scene{display:grid;grid-template-columns:repeat(2,1fr);gap:12px;padding:10px}
  .animal{
    background:linear-gradient(180deg,#fff,#fff9);border-radius:12px;padding:10px;min-height:140px;display:flex;flex-direction:column;align-items:center;justify-content:center;position:relative;border:1px dashed rgba(0,0,0,0.04);
  }
  .animal .art{width:110px;height:90px;display:flex;align-items:center;justify-content:center;font-size:48px}
  .animal .name{margin-top:8px;font-weight:700}
  .animal .hint{font-size:12px;color:var(--muted);margin-top:6px}

  /* drop highlight */
  .animal.drop-target{outline:3px dashed rgba(40,200,120,0.25);transition:outline .15s}
  .animal.wrong{animation:shake .5s}
  @keyframes shake{0%{transform:translateX(0)}25%{transform:translateX(-6px)}50%{transform:translateX(6px)}75%{transform:translateX(-4px)}100%{transform:translateX(0)}}

  .tray{display:flex;gap:8px;flex-wrap:wrap;align-items:center;padding:8px;margin-top:12px}
  .food{
    width:84px;height:84px;border-radius:12px;background:#fff;border:1px solid rgba(10,20,30,0.04);display:flex;flex-direction:column;align-items:center;justify-content:center;cursor:grab;box-shadow:0 6px 12px rgba(10,20,40,0.04);
    user-select:none
  }
  .food:active{cursor:grabbing;transform:scale(.98)}
  .food .emoji{font-size:36px}
  .food .label{font-size:12px;margin-top:6px;color:var(--muted)}

  .hint-box{margin-top:8px;padding:8px;background:#f3fbff;border-radius:8px;font-size:13px;color:#175;display:flex;gap:8px;align-items:center}
  .controls{display:flex;gap:8px;align-items:center;margin-top:12px}
  button{background:#1b9be8;border:none;color:white;padding:8px 12px;border-radius:8px;font-weight:700;cursor:pointer}
  button.secondary{background:#f0f3f5;color:#1b2b3c}
  footer{margin-top:12px;font-size:12px;color:var(--muted)}

  /* end screen */
  .overlay{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(5,10,20,0.35);visibility:hidden;opacity:0;transition:opacity .2s,visibility .2s}
  .overlay.show{visibility:visible;opacity:1}
  .card-result{background:white;padding:18px;border-radius:12px;max-width:520px;width:92%;box-shadow:0 20px 40px rgba(10,20,40,0.18);text-align:center}
  .big{font-size:20px;font-weight:800;margin:8px 0}
  .small-muted{color:var(--muted);font-size:13px}

  /* responsive */
  @media (max-width:860px){
    .stage{flex-direction:column}
    .right{order:2}
    .left{order:1}
    .scene{grid-template-columns:repeat(1,1fr)}
  }
</style>
</head>
<body>
  <div class="container" role="application" aria-label="Game edukasi hewan untuk PAUD">
    <header>
      <div class="logo" aria-hidden>Dd</div>
      <div>
        <h1>Petualangan Dodo di Dunia Hewan</h1>
        <p class="lead">Klik dan seret — belajar hewan peliharaan & ternak. Ramah PAUD (4–6 tahun)</p>
      </div>
    </header>

    <div class="stage">
      <div class="left" id="left">
        <div class="status">
          <div class="badge">Level <span id="level">1</span></div>
          <div class="hint-box" id="hintBox">Halo! Klik hewan untuk mendengar namanya.</div>
          <div class="score">Skor: <span id="score">0</span></div>
        </div>

        <div class="scene" id="scene">
          <!-- Cards for animals will be injected here -->
        </div>

        <div class="tray" id="tray" aria-label="Tray makanan">
          <!-- Food items injected -->
        </div>

        <div class="controls">
          <button id="nextBtn" class="secondary">Ulangi Level</button>
          <button id="resetBtn" class="secondary">Reset Semua</button>
          <button id="helpBtn">Bantuan</button>
        </div>
      </div>

      <aside class="right" id="right">
        <h3>Petunjuk Guru</h3>
        <ul style="padding-left:18px">
          <li>Target: mengenal nama, suara & makanan hewan.</li>
          <li>Interaksi: <strong>klik</strong> = dengar; <strong>seret</strong> = cocokkan makanan.</li>
          <li>Durasi ideal: 5–7 menit per anak.</li>
        </ul>
        <div style="margin-top:12px">
          <strong>CP Fase Fondasi</strong>
          <p class="small-muted">Nilai agama & budi pekerti (syukur), Jati diri (percaya diri), Dasar literasi sains (mengenal makhluk Tuhan).</p>
        </div>
      </aside>
    </div>

    <footer>Created for Lomba Konten Digital PAUD — konsep & prototipe interaktif</footer>
  </div>

  <!-- result overlay -->
  <div id="overlay" class="overlay" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="card-result" role="document">
      <div class="big" id="resultTitle">Kamu Hebat!</div>
      <div class="small-muted" id="resultText">Selamat. Kamu menyelesaikan semua hewan.</div>
      <div style="margin-top:12px">
        <button id="playAgain">Main Lagi</button>
      </div>
    </div>
  </div>

<script>
(function(){
  /* ---- Data model ---- */
  const LEVELS = [
    // Level 1: 4 animals simple
    {
      animals: [
        { id:'cat', name:'Kucing', emoji:'🐱', facts:'Kucing suka susu dan bermain.', soundOnomatopoeia:'miaw', place:'rumah', foods:['fish','milk'] },
        { id:'chicken', name:'Ayam', emoji:'🐔', facts:'Ayam bertelur dan suka pecking.', soundOnomatopoeia:'kukuruyuk', place:'kandang', foods:['corn'] },
        { id:'cow', name:'Sapi', emoji:'🐮', facts:'Sapi memberikan susu dan makan rumput.', soundOnomatopoeia:'mooo', place:'kandang', foods:['grass'] },
        { id:'rabbit', name:'Kelinci', emoji:'🐰', facts:'Kelinci suka wortel dan bersembunyi di kebun.', soundOnomatopoeia:'hop', place:'kebun', foods:['carrot'] }
      ],
      foods: [
        { id:'fish', label:'Ikan', emoji:'🐟' },
        { id:'milk', label:'Susu', emoji:'🥛' },
        { id:'corn', label:'Jagung', emoji:'🌽' },
        { id:'grass', label:'Rumput', emoji:'🌿' },
        { id:'carrot', label:'Wortel', emoji:'🥕' }
      ]
    }
  ];

  /* ---- DOM refs ---- */
  const sceneEl = document.getElementById('scene');
  const trayEl = document.getElementById('tray');
  const scoreEl = document.getElementById('score');
  const levelEl = document.getElementById('level');
  const hintBox = document.getElementById('hintBox');
  const overlay = document.getElementById('overlay');
  const resultTitle = document.getElementById('resultTitle');
  const resultText = document.getElementById('resultText');

  let state = {
    levelIndex: 0,
    score: 0,
    solved: {}
  };

  /* ---- utilities: speak (uses SpeechSynthesis) ---- */
  function speak(text, rate=0.95, pitch=1){
    if(!('speechSynthesis' in window)) return;
    const u = new SpeechSynthesisUtterance(text);
    u.lang = 'id-ID';
    u.rate = rate;
    u.pitch = pitch;
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(u);
  }

  /* ---- render level ---- */
  function renderLevel(){
    const L = LEVELS[state.levelIndex];
    sceneEl.innerHTML = '';
    trayEl.innerHTML = '';
    state.solved = {};
    levelEl.textContent = state.levelIndex + 1;
    hintBox.textContent = 'Klik hewan untuk mendengar nama & fakta. Seret makanan ke hewan yang tepat.';

    // shuffle animals for layout
    const animals = shuffle(Array.from(L.animals));
    animals.forEach(a=>{
      const card = document.createElement('div');
      card.className = 'animal';
      card.id = 'animal-'+a.id;
      card.setAttribute('data-id', a.id);
      card.setAttribute('tabindex','0');
      card.innerHTML = `
        <div class="art" aria-hidden>${a.emoji}</div>
        <div class="name">${a.name}</div>
        <div class="hint">Klik untuk mendengar</div>
      `;
      // click interaction
      card.addEventListener('click', ()=> onAnimalClick(a, card));
      card.addEventListener('keydown', (e)=>{ if(e.key==='Enter') onAnimalClick(a,card) });
      // drop listeners
      card.addEventListener('dragover', (ev)=>{ ev.preventDefault(); card.classList.add('drop-target'); });
      card.addEventListener('dragleave', ()=>{ card.classList.remove('drop-target'); });
      card.addEventListener('drop', (ev)=> onDrop(ev, a, card));
      sceneEl.appendChild(card);
    });

    // foods tray (shuffle)
    const foods = shuffle(Array.from(L.foods));
    foods.forEach(f=>{
      const food = document.createElement('div');
      food.className = 'food';
      food.id = 'food-'+f.id;
      food.setAttribute('draggable','true');
      food.setAttribute('data-id', f.id);
      food.innerHTML = `<div class="emoji">${f.emoji}</div><div class="label">${f.label}</div>`;
      food.addEventListener('dragstart', (ev)=>{ ev.dataTransfer.setData('text/plain', f.id); setTimeout(()=>food.classList.add('hide'),20) });
      food.addEventListener('dragend', ()=>{ food.classList.remove('hide') });
      // also click to "select" for touch devices (fallback)
      food.addEventListener('click', ()=> touchPickFood(f.id));
      trayEl.appendChild(food);
    });

    // touch-drop overlay behavior: allow tapping animal then food (touch-friendly)
    touchState.pickedFood = null;
    updateScoreDisplay();
  }

  /* ---- drag & drop handlers ---- */
  function onDrop(ev, animal, cardEl){
    ev.preventDefault();
    cardEl.classList.remove('drop-target');
    const foodId = ev.dataTransfer.getData('text/plain');
    tryMatch(foodId, animal, cardEl);
  }

  function tryMatch(foodId, animal, cardEl){
    const L = LEVELS[state.levelIndex];
    // correct if foodId is in animal.foods
    const correct = animal.foods.includes(foodId);
    const foodEl = document.getElementById('food-'+foodId);
    if(correct){
      // success animation
      cardEl.style.border = '2px solid rgba(40,200,120,0.16)';
      cardEl.classList.remove('wrong');
      state.solved[animal.id] = true;
      state.score += 10;
      // remove food from tray (soft)
      if(foodEl) foodEl.style.opacity = '.45', foodEl.style.pointerEvents = 'none';
      speak(`${animal.name}. ${animal.facts}`);
      hintBox.textContent = `Bagus! ${animal.name} suka ${describeFood(foodId)}.`;
      showHeart(cardEl);
    } else {
      // wrong
      cardEl.classList.add('wrong');
      state.score = Math.max(0, state.score-2);
      hintBox.textContent = 'Ups, coba lagi ya — perhatikan makanan hewan.';
      // give a short spoken hint
      speak('Coba lagi, perhatikan makanan yang dimakan hewan itu.', 1, 1);
      setTimeout(()=>cardEl.classList.remove('wrong'),550);
      showShake(cardEl);
    }
    updateScoreDisplay();
    checkLevelComplete();
  }

  function describeFood(foodId){
    const L = LEVELS[state.levelIndex];
    const f = L.foods.find(x=>x.id===foodId);
    return f ? f.label : '';
  }

  /* ---- animal click (name + sound + fact) ---- */
  function onAnimalClick(animal, el){
    // speak name + simple onomatopoeia + fact
    speak(`${animal.name}. Suaranya: ${animal.soundOnomatopoeia}. ${animal.facts}`);
    // micro animation
    el.animate([{transform:'translateY(0)'},{transform:'translateY(-6px)'},{transform:'translateY(0)'}],{duration:400,iterations:1});
    hintBox.textContent = `${animal.name} — ${animal.facts}`;
  }

  /* ---- helpers: show animations ---- */
  function showHeart(el){
    const heart = document.createElement('div');
    heart.innerHTML = '💚';
    heart.style.position='absolute';
    heart.style.top='8px';
    heart.style.right='12px';
    heart.style.fontSize='22px';
    el.appendChild(heart);
    heart.animate([{opacity:1, transform:'scale(1)'},{opacity:0, transform:'scale(1.6)'}],{duration:900, easing:'ease-out'});
    setTimeout(()=>heart.remove(),900);
  }
  function showShake(el){
    el.animate([{transform:'rotate(0)'},{transform:'rotate(-6deg)'},{transform:'rotate(6deg)'},{transform:'rotate(0)'}],{duration:400});
  }

  function updateScoreDisplay(){
    scoreEl.textContent = state.score;
  }

  function checkLevelComplete(){
    const L = LEVELS[state.levelIndex];
    const all = L.animals.every(a=> !!state.solved[a.id] );
    if(all){
      // show overlay & praise
      overlay.classList.add('show');
      overlay.setAttribute('aria-hidden','false');
      resultTitle.textContent = 'Kamu Sahabat Hewan!';
      resultText.textContent = `Skormu: ${state.score}. Terima kasih sudah merawat hewan-hewan. Ingat, semua makhluk ciptaan Tuhan perlu disayangi.`;
      speak('Hebat! Kamu menyelesaikan semua hewan. Terima kasih sudah merawat hewan!', 0.95, 1.05);
    }
  }

  /* ---- misc: shuffle ---- */
  function shuffle(arr){ return arr.sort(()=>Math.random()-0.5); }

  /* ---- Touch fallback: tap food then tap animal to drop ---- */
  const touchState = { pickedFood: null };
  function touchPickFood(foodId){
    // select food visually
    const prev = document.querySelector('.food.selected');
    if(prev) prev.classList.remove('selected');
    const f = document.getElementById('food-'+foodId);
    if(!f) return;
    f.classList.add('selected');
    touchState.pickedFood = foodId;
    hintBox.textContent = 'Sekarang ketuk hewan yang ingin diberi makanan.';
    // add listeners to animals to accept touch drop
    document.querySelectorAll('.animal').forEach(card=>{
      card.onclick = ()=>{
        const aid = card.getAttribute('data-id');
        const animal = LEVELS[state.levelIndex].animals.find(x=>x.id===aid);
        if(touchState.pickedFood && animal){
          tryMatch(touchState.pickedFood, animal, card);
          // clear selection
          f.classList.remove('selected');
          touchState.pickedFood = null;
        }
      };
    });
  }

  /* ---- buttons ---- */
  document.getElementById('nextBtn').addEventListener('click', ()=> {
    // restart level
    renderLevel();
  });
  document.getElementById('resetBtn').addEventListener('click', ()=> {
    state.levelIndex = 0; state.score = 0;
    renderLevel();
  });
  document.getElementById('helpBtn').addEventListener('click', ()=> {
    hintBox.textContent = 'Petunjuk: Klik hewan untuk dengar namanya. Seret makanan dari tray ke hewan yang tepat.';
    speak('Petunjuk. Klik hewan untuk mendengar. Seret makanan ke hewan yang tepat.', 0.98, 1);
  });

  document.getElementById('playAgain').addEventListener('click', ()=>{
    overlay.classList.remove('show');
    overlay.setAttribute('aria-hidden','true');
    state.levelIndex = 0; // keep same or advance if more levels exist
    renderLevel();
  });

  /* ---- init ---- */
  renderLevel();

  /* ---- Accessibility: keyboard draggable hint fallback ---- */
  // (Left as simple; main interactions are click & drag)
})();
</script>
</body>
</html>
